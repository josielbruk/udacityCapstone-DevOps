version: 2.1

parameters:
  MoveToProduction:
    type: boolean
    default: false

orbs:
  aws-eks: circleci/aws-eks@1.0.3
  kubernetes: circleci/kubernetes@0.4.0
  

jobs:  

  Lint-Blue-Deployment-Dockerfile:
    docker:
      - image: hadolint/hadolint:latest-debian
    steps:
      - checkout
      - run:
          name: Lint Blue Environment
          command: |
            hadolint ./BlueEnvironment/Dockerfile | tee -a docker_lint_blue.txt
            checkLintBlue=`stat --printf="%s"  docker_lint_blue.txt`
                    
            if [ "$checkLintBlue" -gexit "0" ]
            then
                echo "Error"
                exit 1
            else
                echo "Blue Environment Successful"
            fi
            hadolint ./BlueEnvironment/Dockerfile

  Lint-Green-Deployment-Dockerfile:
    docker:
      - image: hadolint/hadolint:latest-debian
    steps:
      - checkout
      - run:
          name: Lint Green Environment
          command: |
            hadolint ./GreenEnvironment/Dockerfile | tee -a docker_lint_green.txt
            checkLintGreen=`stat --printf="%s"  docker_lint_green.txt`
                    
            if [ "$checkLintGreen" -gexit "0" ]
            then
                echo "Error"
                exit 1
            else
                echo "Green Environment Successful"
            fi
            hadolint ./GreenEnvironment/Dockerfile

  Build-Blue-Deployment-Image:
    docker:
      - image: circleci/buildpack-deps:stretch
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: build Blue Environment
          command: |
            pwd
            ls 
            cd BlueEnvironment
            chmod +x ./run_docker.sh
            ./run_docker.sh
      - persist_to_workspace:
          root: .
          paths:
            - BlueEnvironment/Dockerimage.tar

  Push-Blue-Image:
    docker:
      - image: circleci/buildpack-deps:stretch
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - setup_remote_docker
      - run:
          name: Load Docker image
          command: |
            pwd
            ls
            docker load -i /tmp/workspace/BlueEnvironment/Dockerimage.tar
      - run:
          name: Upload Docker Blue Image to hub
          command: |
            # cd ..
            pwd
            ls
            cd BlueEnvironment
            chmod +x ./upload_docker.sh
            ./upload_docker.sh

  Config-AWS-for-Blue:
    executor: aws-eks/python3
    steps:
      - run: 
          name: install AWS CLI
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64-2.0.30.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

      - run:
          name: Config AWS EKS for Blue
          command: |
            aws eks update-kubeconfig \
            --name UdacityCapstoneJosiel-Cluster \
            --region eu-west-2 \
            --role-arn arn:aws:iam::447576253070:role/eksClusterRole
        
  Deploy-Blue:
    executor: aws-eks/python3
    steps:
      - checkout
      - kubernetes/install
      - run: 
          name: install AWS CLI
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64-2.0.30.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Deploy Blue
          command: |
              aws eks --region eu-west-2 update-kubeconfig \
              --name UdacityCapstoneJosiel-Cluster
              kubectl config use-context arn:aws:eks:eu-west-2:447576253070:cluster/UdacityCapstoneJosiel-Cluster
              kubectl apply -f ./BlueEnvironment/blueDeployment.yml
              kubectl apply -f ./BlueEnvironment/service.yml
              kubectl get nodes
              kubectl get deployment
              kubectl get pod -o wide
              kubectl get services     

  Build-Green-Deployment-Image:
    docker:
      - image: circleci/buildpack-deps:stretch
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: build Green Environment
          command: |
            pwd
            ls 
            cd GreenEnvironment
            chmod +x ./run_docker.sh
            ./run_docker.sh
      - persist_to_workspace:
          root: .
          paths:
            - GreenEnvironment/Dockerimage.tar

  Push-Green-Image:
    docker:
      - image: circleci/buildpack-deps:stretch
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - setup_remote_docker
      - run:
          name: Load Docker image
          command: |
            pwd
            ls
            docker load -i /tmp/workspace/GreenEnvironment/Dockerimage.tar
      - run:
          name: Upload Docker Blue Image to hub
          command: |
            # cd ..
            pwd
            ls
            cd GreenEnvironment
            chmod +x ./upload_docker.sh
            ./upload_docker.sh
  
  Config-AWS-for-Green:
    executor: aws-eks/python3
    steps:
      - run: 
          name: install AWS CLI
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64-2.0.30.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Config AWS EKS for Green
          command: |
            aws eks update-kubeconfig \
            --name UdacityCapstoneJosiel-Cluster \
            --region eu-west-2 \
            --role-arn arn:aws:iam::447576253070:role/eksClusterRole

  Deploy-Green:
    executor: aws-eks/python3
    steps:
    - when:
        condition:
          equal: [ True, << pipeline.parameters.MoveToProduction >> ]
        steps:
          - kubernetes/install
          - checkout
          - run:
              name: install AWS CLI
              command: |
                curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64-2.0.30.zip" -o "awscliv2.zip"
                unzip awscliv2.zip
                sudo ./aws/install
          - run:
              name: Deploy Green
              command: |
                aws eks --region eu-west-2 update-kubeconfig \
                --name UdacityCapstoneJosiel-Cluster
                kubectl config use-context arn:aws:eks:eu-west-2:447576253070:cluster/UdacityCapstoneJosiel-Cluster
                kubectl apply -f ./GreenEnvironment/GreenDeployment.yml
                kubectl apply -f ./GreenEnvironment/service.yml
                kubectl get nodes
                kubectl get deployment
                kubectl get pod -o wide
                kubectl get services
     
  Change-from-blue-to-green:
    executor: aws-eks/python3
    steps:
    - when:
        condition:
          equal: [ True, << pipeline.parameters.MoveToProduction >> ]
        steps:
          - checkout
          - kubernetes/install
          - run: 
              name: install AWS CLI
              command: |
                curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64-2.0.30.zip" -o "awscliv2.zip"
                unzip awscliv2.zip
                sudo ./aws/install
          - run:
              name: Change traffic from blue to green
              command: |
                aws eks --region eu-west-2 update-kubeconfig \
                --name UdacityCapstoneJosiel-Cluster
                kubectl config use-context arn:aws:eks:eu-west-2:447576253070:cluster/UdacityCapstoneJosiel-Cluster                                    
                kubectl apply -f ./GreenEnvironment/service.yml
                kubectl get services

workflows:
  default:
    jobs:      
      - Lint-Blue-Deployment-Dockerfile        
      - Lint-Green-Deployment-Dockerfile
      - Build-Blue-Deployment-Image:
          requires: [Lint-Blue-Deployment-Dockerfile]
      - Push-Blue-Image:
          requires: [Build-Blue-Deployment-Image]
      - Config-AWS-for-Blue:
          requires: [Push-Blue-Image]
      - Deploy-Blue:
          requires: [Config-AWS-for-Blue]
      - Build-Green-Deployment-Image:
          requires: [Lint-Green-Deployment-Dockerfile]
      - Push-Green-Image:
          requires: [Build-Green-Deployment-Image]
      - Config-AWS-for-Green:
          requires: [Push-Green-Image]
      - Deploy-Green:
          requires: [Config-AWS-for-Green]
      - Change-from-blue-to-green:          
          requires: [Deploy-Green, Deploy-Blue]